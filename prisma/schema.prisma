generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}
model User {
  id                String        @id @db.Uuid
  email             String        @unique
  createdAt         DateTime      @default(now())
  opportunities     Opportunity[] @relation("CreatedBy")
  kycVerified       Boolean       @default(false)
  kycSubmitted      Boolean       @default(false)
  kycInformation    String?       // Stores KYC verification information
  organizationName  String?       // For organization/agency users
  organizationRole  String?       // User's role in the organization
  organizationType  String?       // Type of organization (agency, company, non-profit, etc.)
  role              String        @default("individual") // "individual" or "organization"
  activeRole        String        @default("individual") // The currently active role for the user
}

model Opportunity {
  id                    String     @id @default(uuid())
  title                 String
  description           String
  provider              String
  creatorType           String     // "individual", "agency", "company"
  type                  String     // "Government", "NGO", "Corporate", etc.
  tags                  String[]   // "jobs", "grants", "scholarships", "mentorships", "internships", etc.
  customFields          Json?      // Store custom fields as JSON
  industry              String?
  whoCanApply           String[]
  requiredDocuments     String[]
  hasFunding            Boolean    @default(false)
  deadline              DateTime?
  location              String?
  eligibility           String?
  funding               String?
  url                   String?
  isVerified            Boolean    @default(false)
  verificationInfo      String?
  
  // Application process and timeline
  applicationStartDate  DateTime?
  applicationEndDate    DateTime?
  applicationStages     String[]   // Stages in the application process
  decisionDate          DateTime?
  selectionCriteria     String?    // Criteria for selecting applicants
  selectionCommittee    String?    // Information about the selection committee
  
  // Benefits and support
  benefits              String[]   // List of benefits (mentorship, training, etc.)
  mentorshipDetails     String?    // Details about mentorship if offered
  trainingDetails       String?    // Details about training if offered
  networkingDetails     String?    // Details about networking opportunities if offered
  otherBenefits         String?    // Other benefits not covered by the categories above
  
  // Follow-up support
  hasFollowUpSupport    Boolean    @default(false)
  followUpSupportDetails String?   // Details about follow-up support if offered
  
  createdAt             DateTime   @default(now())
  updatedAt             DateTime   @updatedAt
  createdBy             User       @relation("CreatedBy", fields: [userId], references: [id])
  userId                String     @db.Uuid
  
  // Applications
  applications          Application[]
}

model Application {
  id                String     @id @default(uuid())
  status            String     // "pending", "reviewing", "accepted", "rejected"
  currentStage      String?    // Current stage in the application process
  notes             String?    // Notes from the applicant
  feedback          String?    // Feedback from the opportunity provider
  documents         Json?      // JSON object containing document URLs or references
  
  // Interview queue related fields
  isQualified       Boolean    @default(false) // Whether the applicant is qualified for interview
  inInterviewQueue  Boolean    @default(false) // Whether the applicant is in the interview queue
  queuePosition     Int?       // Position in the interview queue (null if not in queue)
  qualificationDate DateTime?  // When the applicant was qualified
  joinedQueueAt     DateTime?  // When the applicant joined the queue
  
  // Timestamps
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
  
  // Relations
  opportunity       Opportunity @relation(fields: [opportunityId], references: [id], onDelete: Cascade)
  opportunityId     String
  applicantId       String     @db.Uuid // User ID of the applicant
  
  // Readiness assessment
  readinessAssessment ReadinessAssessment? @relation(fields: [readinessAssessmentId], references: [id])
  readinessAssessmentId String?
  
  // Unique constraint to prevent duplicate applications
  @@unique([opportunityId, applicantId])
}

model ReadinessAssessment {
  id                String     @id @default(uuid())
  status            String     // "in_progress", "completed", "failed"
  
  // Eligibility check
  eligibilityScore  Float?     // 0-100 score for eligibility
  eligibilityFeedback String?  // AI feedback on eligibility
  
  // Mock application
  mockApplicationCompleted Boolean @default(false)
  mockApplicationScore    Float?   // 0-100 score for mock application
  mockApplicationFeedback String?  // AI feedback on mock application
  mockApplicationData     Json?    // The actual mock application data
  
  // Mock interview
  mockInterviewCompleted  Boolean @default(false)
  mockInterviewScore      Float?   // 0-100 score for mock interview
  mockInterviewFeedback   String?  // AI feedback on mock interview
  mockInterviewData       Json?    // The actual mock interview data
  
  // Final readiness
  finalReadinessScore     Float?   // 0-100 overall readiness score
  recommendedTraining     String?  // AI-recommended training modules
  
  // Timestamps
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
  
  // Relations
  applications      Application[]
  opportunityId     String     // The opportunity this assessment is for
  applicantId       String     @db.Uuid // User ID of the applicant
  
  // Unique constraint to prevent duplicate assessments
  @@unique([opportunityId, applicantId])
}
